/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.gerardnico.rxjava;

import io.reactivex.Observable;

import java.util.stream.IntStream;

public class ObservableApp {

    public static void print(Observable<?> o) {
        System.out.println("Observable:");
        o.subscribe(s -> System.out.println("  * " + s));
    }

    /**
     * Create an Observable from scratch by using the Create operator.
     *   * Doc: http://reactivex.io/documentation/operators/create.html
     *   * Example: https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava#creating-an-observable-via-the-create-method
     * This example shows a custom Observable that blocks
     * when subscribed to (does not spawn an extra thread).
     */
    public static Observable<Object> customObservableBlocking() {
        return Observable.create(aSubscriber -> {
            IntStream.range(0,50).forEach(i -> {
                if (!aSubscriber.isDisposed()) {
                    aSubscriber.onNext("value_"+i);
                }
            });

            // after sending all values we complete the sequence
            if (!aSubscriber.isDisposed()) {
                aSubscriber.onComplete();
                System.out.println("OnComplete fired");
            }
        });
    }
}
